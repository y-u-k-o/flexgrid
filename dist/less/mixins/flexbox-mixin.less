//
// Flexbox Mixin
//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//

.display-flex() {
  display: -ms-flexbox;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

//----------------------------------------------------------------------

.inline-flex() {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

.flex-direction(@value: row) {
  & when (@value = row) {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  & when (@value = row-reverse) {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  }
  & when (@value = column) {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  }
  & when (@value = column-reverse) {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  }
  -webkit-flex-direction: @value;
  -ms-flex-direction: @value;
  flex-direction: @value;
}


//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

.flex-wrap(@value: nowrap) {
  & when (@value = wrap) {
    -webkit-box-lines: multiple;
  }
  & when (@value = nowrap) {
    -ms-flex-wrap: none;
  }
  & when not (@value = nowrap) {
    -ms-flex-wrap: @value;
  }
  -webkit-flex-wrap: @value;
  flex-wrap: @value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

.flex-flow(@direction: row, @wrap: nowrap) {
  & when (@direction = row) {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  & when (@direction = row-reverse) {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  }
  & when (@direction = column) {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  }
  & when (@direction = column-reverse) {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  }
  & when (@wrap = wrap) {
    -webkit-box-lines: multiple;
  }
  -webkit-flex-flow: @direction @wrap;
  -ms-flex-flow: @direction @wrap;
  flex-flow: @direction @wrap;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

.flex-order(@value: 0) {
  -webkit-box-ordinal-group: @value + 1;
  -webkit-order: @value;
  -ms-flex-order: @value;
  order: @value;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers are invalid.
//
// Values: "initial", "inherit", or a number
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

.flex-grow(@value: 0) {
  -webkit-box-flex: @value;
  -webkit-flex-grow: @value;
  -ms-flex-positive: @value;
  flex-grow: @value;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers are invalid.
//
// Values: "initial", "inherit", or a number
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

.flex-shrink(@value: 1) {
  -webkit-flex-shrink: @value;
  -ms-flex-negative: @value;
  flex-shrink: @value;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: "auto", "inherit", or a number followed by "%", "px", "em" or any other length unit
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

.flex-basis(@value: auto) {
  -webkit-flex-basis: @value;
  -ms-flex-preferred-size: @value;
  flex-basis: @value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the flex grow factor and flex shrink factor,
// and the flex basis. When an element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 auto).
//
// http://w3.org/tr/css3-flexbox/#flex-property

.flex(@flex-grow: 1, @flex-shrink: 1, @flex-basis: auto) {
  -webkit-box-flex: @flex-grow;
  -webkit-flex: @flex-grow @flex-shrink @flex-basis;
  -ms-flex: @flex-grow @flex-shrink @flex-basis;
  flex: @flex-grow @flex-shrink @flex-basis;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis of the current line of the flex container.
// This is done after any flexible lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached
// their maximum size. It also exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: center
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

.justify-content(@value: center) {
  & when (@value = flex-start) {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  }
  & when (@value = flex-end) {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  }
  & when (@value = space-between) {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  }
  & when (@value = space-around) {
    -ms-flex-pack: distribute;
  }
  & when not (@value = flex-start) {
    & when not (@value = flex-end) {
      & when not (@value = space-between) {
        -webkit-box-pack: @value;
        & when not (@value = space-around) {
          -ms-flex-pack: @value;
        }
      }
    }
  }
  -webkit-justify-content: @value;
  justify-content: @value;
}

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the flex container, similar to 'justify-content'
// but in the perpendicular direction. 'align-items' sets the default alignment for all of the flex container's items,
// including anonymous flex items. 'align-self' allows this default alignment to be overridden for individual flex items.
// (For anonymous flex items, 'align-self' always matches the value of 'align-items' on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: center
//
// http://w3.org/tr/css3-flexbox/#align-items-property

.align-items(@value: center) {
  & when (@value = flex-start) {
    -webkit-box-align: start;
    -ms-flex-align: start;
  }
  & when (@value = flex-end) {
    -webkit-box-align: end;
    -ms-flex-align: end;
  }
  & when not (@value = flex-start) {
    & when not (@value = flex-end) {
      -webkit-box-align: @value;
      -ms-flex-align: @value;
    }
  }
  -webkit-align-items: @value;
  align-items: @value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: center
//
// http://www.w3schools.com/cssref/css3_pr_align-self.asp

.align-self(@value: center) {
  & when (@value = flex-start) {
    -ms-flex-item-align: start;
  }
  & when (@value = flex-end) {
    -ms-flex-item-align: end;
  }
  & when not (@value = flex-start) {
    & when not (@value = flex-end) {
      -ms-flex-item-align: @value;
    }
  }
  -webkit-align-self: @value;
  align-self: @value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the flex container when there is extra space
// in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.
// Note, this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

.align-content(@value: stretch) {
  & when (@value = flex-start) {
    -ms-flex-line-pack: start;
  }
  & when (@value = flex-end) {
    -ms-flex-line-pack: end;
  }
  & when not (@value = flex-start) {
    & when not (@value = flex-end) {
      -ms-flex-line-pack: @value;
    }
  }
  align-content: @value;
}

